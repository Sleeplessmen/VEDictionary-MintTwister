import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.FileOutputStream;import java.io.FileReader;import java.io.OutputStreamWriter;import java.util.*;public class DictionaryManagement extends Dictionary {    private static final String INPUTFILEPATH = "src/main/resources/FirstverDictionary.txt";    private static final String OUTPUTFILEPATH = "src/main/resources/OutputDictionaryFile.txt";    /** done. */    public void showAllWords() {        int counter = 1;        System.out.printf("%-5s| %-15s| %-15s%n", "No", "English", "Vietnamese");        for(Word word : listWord) {            System.out.printf("%-5s| %-15s| %-15s%n", ++counter ,word.getWordTarget(), word.getWordExplain());        }    }    /** done. */    public void addWord() {        Scanner scanner = new Scanner(System.in);        int numberOfWords = 0;        // Check integer input        boolean validInput = false;        while (!validInput) {            System.out.println("Number of words: ");            numberOfWords = Integer.parseInt(scanner.nextLine().trim());            if (numberOfWords > 0) {                validInput = true;            } else {                System.out.println("Invalid input. Please enter an integer.");            }        }        while (numberOfWords-- > 0) {            System.out.println("Enter a new word: ");            String wordTarget = scanner.nextLine().trim();            System.out.println("Enter meanings of the word: ");            String wordExplain = scanner.nextLine().trim();            // check and add word            int idx = binarycheck(0, listWord.size(), wordTarget);            if (idx == -1) {                System.out.println("The word already exists in the dictionary.");                return;            }            listWord.add(new Word());            for (int i = listWord.size() - 1; i > idx; i--) {                listWord.get(i).setWordTarget(listWord.get(i - 1).getWordTarget());                listWord.get(i).setWordExplain(listWord.get(i - 1).getWordExplain());            }            listWord.get(idx).setWordTarget(wordTarget);            listWord.get(idx).setWordExplain(wordExplain);        }    }    /**     * return index of the word with wordTarget     * return -1 if the word is already existed     */    public static int binarycheck(int start, int end, String wordTarget) {        if (end < start) {            return -1;        }        int mid = (start + end) / 2;        int compareNext = wordTarget.compareTo(listWord.get(mid).getWordTarget());        if (mid == 0) {            if (compareNext < 0) {                return 0;            } else if (compareNext > 0) {                return binarycheck(mid + 1, end, wordTarget);            } else {                return -1;            }        } else {            int comparePrev = wordTarget.compareTo(listWord.get(mid - 1).getWordTarget());            if (comparePrev > 0 && compareNext < 0) {                return mid;            } else if (comparePrev < 0) {                return binarycheck(start, mid - 1, wordTarget);            } else if (compareNext > 0) {                if (mid == listWord.size() - 1) {                    return listWord.size();                }                return binarycheck(mid + 1, end, wordTarget);            } else {                return -1;            }        }    }    /** done. */    public void removeWord() {        Scanner scanner = new Scanner(System.in);        System.out.println("Enter the word to remove: ");        String target = scanner.nextLine().trim();        target = target.toLowerCase();        int idx = Collections.binarySearch(listWord, new Word(target, null));        if (idx >= 0) {            listWord.remove(listWord.get(idx));            System.out.println("Remove word successfully.");        } else {            System.out.println("The word does not exist in the dictionary. ");        }    }    /** done. */    public void modifyWord() {        System.out.println("Enter the word to edit: ");        Scanner scanner = new Scanner(System.in);        String target = scanner.nextLine().trim();        String explain = scanner.nextLine().trim();        int idx = Collections.binarySearch(listWord, new Word(target, null));        if (idx >= 0) {            listWord.get(idx).setWordExplain(explain);            System.out.println("The word has been removed successfully.");        } else {            System.out.println("The word does not exist in the dictionary.");        }    }    /** done. */    public void insertWordFromFile() {        try {            BufferedReader reader = new BufferedReader(new FileReader(INPUTFILEPATH));            String line;            while ((line = reader.readLine()) != null) {                String[] input = line.split("\\s*\\t\\s*");                Word word = new Word(input[0], input[1]);                listWord.add(word);            }            if (!listWord.isEmpty()) System.out.println("The word has been successfully inserted from the file.");        } catch (Exception e) {            e.printStackTrace();        }    }    /** done. */    public void ExportWordToFile() {        try {            BufferedWriter bufferedWriter = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(OUTPUTFILEPATH)));            String format = "%-15s %-15s%n";            for (Word word : listWord) {                bufferedWriter.write(String.format(format, word.getWordTarget(), word.getWordExplain()));            }            bufferedWriter.flush();            bufferedWriter.close();        } catch (Exception e) {            e.printStackTrace();        }    }        public void dictionaryLookup() {        System.out.println("enter the keyword: ");        Scanner scan = new Scanner(System.in);        String a = scan.nextLine();        listWord.stream().filter((i) ->                        (i.getWordTarget().equals(a))).                forEachOrdered( (i) -> System.out.println(i.getWordExplain()));    }    public static int isContain(String str1, String str2) {        for (int i = 0; i < Math.min(str1.length(), str2.length()); i++) {            if (str1.charAt(i) > str2.charAt(i)) {                return 1;            } else if (str1.charAt(i) < str2.charAt(i)) {                return -1;            }        }        if (str1.length() > str2.length()) {            return 1;        }        return 0;    }    public static int binaryLookup(int start, int end, String wordTarget) {        if (end < start) {            return -1;        }        int mid = (start + end) / 2;        int compare = isContain(wordTarget, listWord.get(mid).getWordTarget());        if (compare == -1) {            return binaryLookup(start, mid - 1, wordTarget);        } else if (compare == 1) {            return binaryLookup(mid + 1, end, wordTarget);        } else {            return mid;        }    }    public void dictionarySearcher() {        System.out.print("Enter the keyword to search: ");        Scanner scanner = new Scanner(System.in);        String keyword = scanner.nextLine().trim();        List<String> suggestions = new ArrayList<>();        for (Word word : listWord) {            String wordTarget = word.getWordTarget();            if (wordTarget.toLowerCase().startsWith(keyword.toLowerCase())) {                suggestions.add(wordTarget);            }        }        for (String suggestion : suggestions) {            System.out.print(suggestion + " ");        }    }}