import java.io.*;import java.util.*;public class DictionaryManagement extends Dictionary {    private static final String INPUTFILEPATH = "src/main/resources/FirstverDictionary.txt";    private static final String OUTPUTFILEPATH = "src/main/resources/OutputDictionaryFile.txt";    public void insertWordFromFile() {        try (FileReader fr = new FileReader(INPUTFILEPATH);             BufferedReader br = new BufferedReader(fr)) {            String line;            while ((line = br.readLine()) != null) {                String[] wordData = line.split("\\t");                if (wordData.length == 2) {                    Word word = new Word(wordData[0], wordData[1]);                    listWord.add(word);                } else {                    System.out.println("Error reading file.");                    return;                }            }            if (listWord.isEmpty()) {                System.out.println("Empty input file.");            } else {                System.out.println("Insert words from txt file succesfully.");            }            Collections.sort(listWord);        } catch (Exception e) {            e.printStackTrace();        }    }    public void ExportWordToFile() {        try (FileOutputStream fos = new FileOutputStream(OUTPUTFILEPATH);             BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(fos))) {            String format = "%-15s%-15s%n";            for (Word word : listWord) {                bw.write(String.format(format, word.getWordTarget(), word.getWordExplain()));            }        } catch (Exception e) {            e.printStackTrace();        }    }    /** done. */    public void showAllWords() {        int counter = 1;        System.out.printf("%-5s| %-15s| %-15s%n", "No", "English", "Vietnamese");        for(Word word : listWord) {            System.out.printf("%-5s| %-15s| %-15s%n", counter, word.getWordTarget(), word.getWordExplain());            counter++;        }    }    /** done. */    public void addWord() {        Scanner scanner = new Scanner(System.in);        int numberOfWords = 0;        boolean validInput = false;        while (!validInput) {            System.out.println("Number of words: ");            String input = scanner.nextLine().trim();            if (input.matches("[0-9]+")) {                numberOfWords = Integer.parseInt(input);                validInput = true;            } else {                System.out.println("Invalid input. Please enter an positive integer.");                System.out.println("Continue to add word? Yes(y)/No(n)");                char query = scanner.nextLine().charAt(0);                if (query == 'n')  {                    return;                }            }        }        while (numberOfWords-- > 0) {            System.out.println("Enter a new word: ");            String wordTarget = scanner.nextLine().trim().toLowerCase();            System.out.println("Enter meanings of the word: ");            String wordExplain = scanner.nextLine().trim().toLowerCase();            int idx = binarySearchWordTarget(0, listWord.size(), wordTarget);            if (idx == 0) {                System.out.println("The word already exists in the dictionary.");                return;            }            listWord.add(new Word(wordTarget, wordExplain));            System.out.println("Add word successfully to the dictionary.");            Collections.sort(listWord);        }    }    public int binarySearchWordTarget(int start, int end, String wordTarget) {        if (start > end) {            return -1;        }        int mid = (start + end) / 2;        if (mid == 0 && listWord.isEmpty()) {            return -1;        }        int comp = wordTarget.compareTo(listWord.get(mid).getWordTarget());        if (comp == 0) {            return 0;        } else if (comp < 0) {            binarySearchWordTarget(0, mid - 1, wordTarget);        } else {            binarySearchWordTarget(mid + 1, end, wordTarget);        }        return -1;    }    public void removeWord() {        Scanner scanner = new Scanner(System.in);        System.out.println("Enter the word to remove: ");        String target = scanner.nextLine().trim().toLowerCase();        int idx = Collections.binarySearch(listWord, new Word(target, null));        if (idx >= 0) {            listWord.remove(listWord.get(idx));            System.out.println("Remove word successfully.");        } else {            System.out.println("The word does not exist in the dictionary. ");        }    }    /** done. */    public void modifyWord() {        System.out.println("Enter the word to edit: ");        Scanner scanner = new Scanner(System.in);        String target = scanner.nextLine().trim().toLowerCase();        String explain = scanner.nextLine().trim().toLowerCase();        int idx = Collections.binarySearch(listWord, new Word(target, null));        if (idx >= 0) {            listWord.get(idx).setWordExplain(explain);            System.out.println("The word has been removed successfully.");        } else {            System.out.println("The word does not exist in the dictionary.");        }    }        public void dictionaryLookup() {        Scanner scanner = new Scanner(System.in);        int query = 1;        do {            System.out.print("enter the word:");            String wordTarget = scanner.nextLine();            int idx = Collections.binarySearch(listWord, new Word(wordTarget, null));            if (idx >= 0) {                System.out.println(listWord.get(idx).getWordExplain());            } else {                System.out.println("The word does not exist in the dictionary.");            }            System.out.print("Do you want to continue to look up? Yes(1) No(2):");            query = Integer.parseInt(scanner.nextLine());        } while (query == 1);    }    public void dictionarySearcher() {        System.out.print("Enter the keyword to search: ");        Scanner scanner = new Scanner(System.in);        String keyword = scanner.nextLine().trim();        List<String> suggestions = new ArrayList<>();        for (Word word : listWord) {            String wordTarget = word.getWordTarget();            if (wordTarget.toLowerCase().startsWith(keyword.toLowerCase())) {                suggestions.add(wordTarget);            }        }        for (String suggestion : suggestions) {            System.out.println(suggestion);        }    }    public void mcq() {        Scanner scanner = new Scanner(System.in);        int query; int idx;        Random random = new Random();        QuizGame qg = new QuizGame();        qg.readquestionsfromFile();        System.out.println(" ******RANDOM QUIZ GAME****** ");        System.out.println("  (Multiple-choice question)  ");        System.out.println("1.Start");        System.out.println("2.Return");        System.out.print("Your choice:");        query = Integer.parseInt(scanner.nextLine());        if (query == 2) {            return;        }        do {            idx = random.nextInt(qg.getSize());            System.out.println(qg.getQuestions().get(idx).prompt());            System.out.println("Your choice:");            if (scanner.nextLine().equalsIgnoreCase(qg.getQuestions().get(idx).answer())) {                System.out.println("Correct answer.");            } else {                System.out.println("Wrong answer");            }            System.out.print("Continue? Yes(1) No(2):");            query = Integer.parseInt(scanner.nextLine());        } while (query == 1);    }}